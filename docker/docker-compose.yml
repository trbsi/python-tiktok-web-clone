services:
  my-app-db:
    networks:
      - my-network
    image: mysql:8.0
    container_name: my-app-db
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_HOST_PORT}:3306"
    volumes:
      - my_app_db_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -uroot -pexample_root_password" ]
      interval: 10s
      timeout: 5s
      retries: 10

  my-app-redis:
    networks:
      - my-network
    image: redis:7
    container_name: my-app-redis
    restart: unless-stopped
    volumes:
      - my_app_redis_data:/data

  my-app-phpmyadmin:
    networks:
      - my-network
    image: phpmyadmin/phpmyadmin:latest
    container_name: my-app-phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: my-app-db
      VIRTUAL_HOST: ${PHPMYADMIN_VIRTUAL_HOST}
    depends_on:
      - my-app-db

  my-app-web:
    user: "${UID}:${GID}"
    networks:
      - my-network
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    container_name: my-app-web
    restart: unless-stopped
    environment:
      # Required by nginx-proxy to proxy to gunicorn
      VIRTUAL_HOST: ${NGINX_VIRTUAL_HOST} # the domain you will use to access your app (can be myapp.local for local dev).
      VIRTUAL_PORT: 8000  # Gunicorn port inside the container
      # Required by nginx-proxy + acme-companion
      LETSENCRYPT_HOST: ${NGINX_LETSENCRYPT_HOST}
      LETSENCRYPT_EMAIL: ${NGINX_LETSENCRYPT_EMAIL}
      DJANGO_SETTINGS_MODULE: ${DJANGO_SETTINGS_MODULE}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: redis://redis:6379/0
      # enable debug for dev/live reload
      DEBUG: 1
    # volumes: are in override
    command: >
      gunicorn ${DJANGO_WSGI}:application
      --bind 0.0.0.0:8000
      --workers 3
      --reload
      --log-level debug
    depends_on:
      my-app-db:
        condition: service_healthy
      my-app-redis:
        condition: service_started

  my-app-celery_worker:
    networks:
      - my-network
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    container_name: my-app-celery_worker
    command: celery -A ${CELERY_APP} worker --loglevel=info --concurrency=1
    volumes:
      - ../:/app:cached
      - my_app_static_volume:/app/staticfiles
      - my_app_media_volume:/app/uploads
    depends_on:
      - my-app-redis
      - my-app-db

  my-app-celery_beat:
    networks:
      - my-network
    build:
      context: ..
      dockerfile: docker/web/Dockerfile
    container_name: my-app-celery_beat
    command: celery -A ${CELERY_APP} beat --loglevel=info --schedule=/app/celerybeat_data/celerybeat-schedule
    volumes:
      - ../:/app:cached
      - my_app_static_volume:/app/staticfiles
      - my_app_media_volume:/app/uploads
      - my_app_celerybeat_data:/app/celerybeat_data
    depends_on:
      - my-app-redis
      - my-app-db

  my-app-nginx:
    networks:
      - my-network
    image: jwilder/nginx-proxy
    container_name: my-app-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - my_app_nginx_vhost:/etc/nginx/vhost.d
      - my_app_nginx_html:/usr/share/nginx/html

networks:
  my-network:
    external: true

volumes:
  my_app_nginx_vhost:
  my_app_nginx_html:
  my_app_db_data:
  my_app_redis_data:
  my_app_static_volume:
  my_app_media_volume:
  my_app_logs_volume:
  my_app_celerybeat_data:
