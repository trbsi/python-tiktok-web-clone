"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

import environ

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False),
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Take environment variables from .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG_MODE')
APP_ENV = env('APP_ENV')
APP_URL = env('APP_URL')
APP_NAME = env('APP_NAME')
DB_TYPE = env('DB_TYPE')
DATE_TIME_FORMAT = '%m/%d/%Y %I:%M%p'
IP_DATABASE_PATH = BASE_DIR / 'geoip/GeoLite-City.mmdb'

# Application definition

INSTALLED_APPS = [
    'src.authentication.apps.AuthenticationConfig',
    'src.discover.apps.DiscoverConfig',
    'src.feed.apps.FeedConfig',
    'src.inbox.apps.InboxConfig',
    'src.user.apps.UserConfig',
    'src.media.apps.MediaConfig',
    'src.core.apps.CoreConfig',
    'src.payment.apps.PaymentConfig',
    'src.engagement.apps.EngagementConfig',
    'src.follow.apps.FollowConfig',
    'src.report.apps.ReportConfig',
    'src.notification.apps.NotificationConfig',
    'src.storage.apps.StorageConfig',
    'src.age_verification.apps.AgeVerificationConfig',

    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_cleanup.apps.CleanupConfig',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.twitter_oauth2',

    'auditlog',
    'log_viewer',

    'django_celery_beat',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'src.age_verification.middlewares.AgeVerificationMiddleware',

    'allauth.account.middleware.AccountMiddleware',

    'auditlog.middleware.AuditlogMiddleware'
]

# settings.py
DATA_UPLOAD_MAX_MEMORY_SIZE = 262144000  # 250 MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 262144000  # 250 MB

# Auth
SESSION_COOKIE_AGE = 86400 * 30  # 30 days
LOGOUT_REDIRECT_URL = '/'
LOGIN_REDIRECT_URL = '/'
LOGIN_URL = '/auth/login/'
AUTH_USER_MODEL = 'user.User'
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'app.context_processor.environment_variables',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if (DB_TYPE == 'sqlite'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
if (DB_TYPE == 'mysql'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': env('MYSQL_DATABASE'),
            'USER': env('MYSQL_USER'),
            'PASSWORD': env('MYSQL_PASSWORD'),
            'HOST': env('MYSQL_HOST'),
            'PORT': '3306',
        }
    }

# Storage
STORAGE_TYPE = env('STORAGE_TYPE')
STORAGE_CONFIG = {
    'backblaze': {
        'application_key_id': env('BACKBLAZE_APPLICATION_KEY_ID'),
        'application_key': env('BACKBLAZE_APPLICATION_KEY'),
        'bucket_name': env('BACKBLAZE_DEFAULT_BUCKET_NAME'),
    },
    'bunny': {
        'storage_api_key': env('BUNNY_STORAGE_API_KEY'),
        'base_url': env('BUNNY_BASE_URL'),
        'storage_zone_name': env('BUNNY_STORAGE_ZONE_NAME'),
    }
}
STORAGE_CDN_URL = env('STORAGE_CDN_URL')

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, "static")]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_URL = '/uploads/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'uploads')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env('EMAIL_HOST')  # e.g. smtp.gmail.com, smtp.sendgrid.net, etc.
EMAIL_PORT = env('EMAIL_PORT')  # 587 for TLS, 465 for SSL, 25 (not recommended)
EMAIL_USE_TLS = env.bool('EMAIL_USE_TLS')  # or EMAIL_USE_SSL = True
EMAIL_HOST_USER = env('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')

DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL')
ADMIN_EMAILS = env('ADMIN_EMAILS').split(',')
SUPPORT_EMAIL = env('SUPPORT_EMAIL')

ALLOWED_HOSTS = env('ALLOWED_HOSTS').split(',')
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS').split(',')
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# allauth settings
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "optional"  # "mandatory" if you want verified emails
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'

# Celery
CELERY_BROKER_URL = env('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = env('CELERY_RESULT_BACKEND')
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_ALWAYS_EAGER = False if APP_ENV == 'production' else env.bool('CELERY_TASK_ALWAYS_EAGER')
CELERY_TASK_EAGER_PROPAGATES = env.bool('CELERY_TASK_EAGER_PROPAGATES')

# Age verification
AGE_VERIFICATION_PROVIDER = env('AGE_VERIFICATION_PROVIDER')
AGE_VERIFICATION_CONFIG = {
    'didit.me': {
        'base_url': env('AGE_VERIFICATION_DIDIT_BASE_URL'),
        'api_key': env('AGE_VERIFICATION_DIDIT_API_KEY'),
        'workflow_id': env('AGE_VERIFICATION_DIDIT_WORKFLOW_ID'),
        'webhook_secret_key': env('AGE_VERIFICATION_DIDIT_WEBHOOK_KEY'),
    }
}

# Logging
LOG_VIEWER_FILES = ["*.logs*"]
LOG_VIEWER_FILES_PATTERN = '*.logs*'
LOG_VIEWER_FILES_DIR = os.path.join(BASE_DIR, "logs/")
LOG_VIEWER_PAGE_LENGTH = 25  # total logs lines per-page
LOG_VIEWER_MAX_READ_LINES = 1000  # total logs lines will be read
LOG_VIEWER_FILE_LIST_MAX_ITEMS_PER_PAGE = 25  # Max logs files loaded in Datatable per page
LOG_VIEWER_PATTERNS = ['INFO', 'DEBUG', 'WARNING', 'ERROR', 'CRITICAL']
LOG_VIEWER_EXCLUDE_TEXT_PATTERN = None  # String regex expression to exclude the logs from line

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # Keep Djangoâ€™s default loggers
    'formatters': {
        'verbose': {
            'format': '{levelname} [{asctime}] {name}: {message}',
            'datefmt': '%d.%m.%Y %H:%M:%S',
            'style': '{',
        },
    },
    'handlers': {
        'daily_file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'django.logs'),
            'when': 'midnight',  # Rotate daily at midnight
            'interval': 1,  # Every 1 day
            'backupCount': 7,  # Keep 7 days of logs
            'encoding': 'utf-8',
            'formatter': 'verbose',
        },
    },
    "root": {
        "handlers": ["daily_file"],
        "level": "INFO",
    },
}
